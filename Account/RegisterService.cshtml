@* Entfernen Sie diesen Abschnitt, wenn Sie Bundling verwenden. *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Registrieren";

    string email = "";
    string loginData = "";
    string providerDisplayName = "";

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty()) {
        // Einige externe Anmeldeanbieter erfordern immer einen URL-Rückgabewert.
        returnUrl = Href("~/");
    }

    // Überprüfung einrichten
    Validation.RequireField("email", "Das Feld für den Benutzernamen ist ein Pflichtfeld.");

    if (IsPost && Request.Form["newAccount"].AsBool()) {
        // Registrierungsformular für ein neues Konto verarbeiten
        AntiForgery.Validate();
        email = Request.Form["email"];
        loginData = Request.Form["loginData"];

        string provider = "";
        string providerUserId = "";
        if (WebSecurity.IsAuthenticated || !OAuthWebSecurity.TryDeserializeProviderUserId(loginData, out provider, out providerUserId)) {
            Response.Redirect("~/Account/Manage");
            return;
        }

        providerDisplayName = OAuthWebSecurity.GetOAuthClientData(provider).DisplayName;
        if (Validation.IsValid()) {
            // Einen neuen Benutzer in die Datenbank einfügen
            var db = Database.Open("StarterSite");

            // Überprüfen, ob der Benutzer bereits vorhanden ist.
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
                // Eine E-Mail in die Profiltabelle einfügen
                db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);
                OAuthWebSecurity.CreateOrUpdateAccount(provider, providerUserId, email);

                OAuthWebSecurity.Login(provider, providerUserId, createPersistentCookie: false);

                Context.RedirectLocal(returnUrl);
                return;
            } else {
                ModelState.AddError("email", "Der Benutzername ist bereits vorhanden. Bitte geben Sie einen anderen Benutzernamen ein.");
            }
        }
    } else {
        // Rückrufe vom externen Anmeldeanbieter verarbeiten

        var result = OAuthWebSecurity.VerifyAuthentication(Href("~/Account/RegisterService", new { returnUrl }));
        if (result.IsSuccessful) {
            bool registered = OAuthWebSecurity.Login(result.Provider, result.ProviderUserId, createPersistentCookie: false);
            if (registered) {
                Context.RedirectLocal(returnUrl);
                return;
            }

            if (WebSecurity.IsAuthenticated) {
                // Wenn der aktuelle Benutzer angemeldet ist, das neue Konto hinzufügen
                OAuthWebSecurity.CreateOrUpdateAccount(result.Provider, result.ProviderUserId, WebSecurity.CurrentUserName);
                Context.RedirectLocal(returnUrl);
                return;
            } else {
                // Der Benutzer ist neu, den Standardbenutzernamen auf den vom externen Anmeldeanbieter abgerufenen Namen festlegen
                email = result.UserName;
                loginData = OAuthWebSecurity.SerializeProviderUserId(result.Provider, result.ProviderUserId);
                providerDisplayName = OAuthWebSecurity.GetOAuthClientData(result.Provider).DisplayName;
            }
        } else {
            Response.Redirect("~/Account/ExternalLoginFailure");
            return;
        }
    }
}
<hgroup class="title">
    <h1>@Page.Title.</h1>
    <h2>Zuordnen Ihres @providerDisplayName-Kontos.</h2>
</hgroup>

<form method="post">
    @AntiForgery.GetHtml()
    <input type="hidden" name="loginData" value="@loginData" />
    @* Den Benutzer benachrichtigen, wenn mindestens ein Überprüfungsfehler vorliegt *@
    @Html.ValidationSummary(excludeFieldErrors: true)

    <fieldset>
        <legend>Registrierungsformular</legend>
        <p>
            Sie haben sich erfolgreich authentifiziert mit: <strong>@providerDisplayName</strong>. Bitte
            geben Sie unten einen Benutzernamen für diese Website an, und klicken Sie dann auf die Schaltfläche "Bestätigen", um die Anmeldung
            abzuschließen.
        </p>
        <ol>
            <li class="email">
                <label for="email" @if (!ModelState.IsValidField("email")) {<text>class="error-label"</text>}>E-Mail-Adresse</label>
                <input type="text" id="email" name="email" value="@email" @Validation.For("email") />
                @* E-Mail-Überprüfungsfehler auf der Seite ausgeben *@
                @Html.ValidationMessage("email")
            </li>
        </ol>
        <button type="submit" name="newAccount" value="true">Registrieren</button>
    </fieldset>
</form>
